
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import nodes.*;
import symbol.Sym;

import java.util.ArrayList;
/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /**
   * Production table.
   */
  protected static final short[][] _production_table =
          unpackFromStrings(new String[]{
                  "\000\125\000\002\002\005\000\002\002\004\000\002\003" +
                          "\002\000\002\003\004\000\002\007\010\000\002\005\002" +
                          "\000\002\005\004\000\002\004\005\000\002\004\005\000" +
                          "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
                          "\014\003\000\002\012\003\000\002\012\005\000\002\012" +
                          "\005\000\002\012\007\000\002\013\005\000\002\013\007" +
                          "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
                          "\002\015\003\000\002\015\003\000\002\006\016\000\002" +
                          "\006\014\000\002\016\002\000\002\016\003\000\002\017" +
                          "\003\000\002\017\005\000\002\020\004\000\002\020\005" +
                          "\000\002\011\002\000\002\011\004\000\002\010\004\000" +
                          "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
                          "\010\004\000\002\010\004\000\002\010\005\000\002\021" +
                          "\012\000\002\030\002\000\002\030\005\000\002\022\011" +
                          "\000\002\023\005\000\002\023\004\000\002\032\003\000" +
                          "\002\032\005\000\002\024\004\000\002\024\004\000\002" +
                          "\024\004\000\002\024\004\000\002\025\005\000\002\031" +
                          "\006\000\002\031\005\000\002\027\003\000\002\027\005" +
                          "\000\002\027\004\000\002\027\006\000\002\026\003\000" +
                          "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
                          "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
                          "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
                          "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
                          "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
                          "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
                          "\005\000\002\026\005\000\002\026\004\000\002\026\004" +
                          "\000\002\026\005"});

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\020\043\006\044\014\045\012\046\010\047" +
    "\013\050\uffff\052\uffff\001\002\000\004\064\254\001\002" +
    "\000\004\002\253\001\002\000\040\022\ufff8\025\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\053\ufff8" +
    "\054\ufff8\055\ufff8\056\ufff8\057\ufff8\063\ufff8\064\ufff8\001" +
    "\002\000\006\050\035\052\ufffc\001\002\000\040\022\ufff7" +
    "\025\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\063\ufff7" +
    "\064\ufff7\001\002\000\046\022\uffff\024\uffff\025\uffff\042" +
    "\uffff\043\006\044\014\045\012\046\010\047\013\050\uffff" +
    "\052\uffff\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\063" +
    "\uffff\064\uffff\001\002\000\040\022\ufff5\025\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\053\ufff5\054" +
    "\ufff5\055\ufff5\056\ufff5\057\ufff5\063\ufff5\064\ufff5\001\002" +
    "\000\004\064\015\001\002\000\040\022\ufff6\025\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\053\ufff6" +
    "\054\ufff6\055\ufff6\056\ufff6\057\ufff6\063\ufff6\064\ufff6\001" +
    "\002\000\004\004\031\001\002\000\006\037\020\040\017" +
    "\001\002\000\004\064\021\001\002\000\046\022\ufff9\024" +
    "\ufff9\025\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9" +
    "\047\ufff9\050\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\063\ufff9\064\ufff9\001\002\000\004\004\022" +
    "\001\002\000\014\027\024\030\027\031\023\032\025\033" +
    "\026\001\002\000\006\037\uffea\040\uffea\001\002\000\006" +
    "\037\uffee\040\uffee\001\002\000\006\037\uffec\040\uffec\001" +
    "\002\000\006\037\uffeb\040\uffeb\001\002\000\006\037\uffed" +
    "\040\uffed\001\002\000\006\037\uffef\040\uffef\001\002\000" +
    "\014\027\024\030\027\031\023\032\025\033\026\001\002" +
    "\000\006\037\ufff0\040\ufff0\001\002\000\034\022\ufffe\024" +
    "\ufffe\025\ufffe\042\ufffe\050\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\056\ufffe\057\ufffe\063\ufffe\064\ufffe\001\002\000" +
    "\006\050\035\052\ufffc\001\002\000\004\064\221\001\002" +
    "\000\004\052\037\001\002\000\040\022\uffff\025\uffff\042" +
    "\uffff\043\006\044\014\045\012\046\010\047\013\053\uffff" +
    "\054\uffff\055\uffff\056\uffff\057\uffff\063\uffff\064\uffff\001" +
    "\002\000\004\002\001\001\002\000\026\022\051\025\043" +
    "\042\uffe1\053\042\054\055\055\046\056\044\057\062\063" +
    "\061\064\054\001\002\000\004\064\214\001\002\000\024" +
    "\006\063\027\073\030\064\031\066\032\067\033\072\034" +
    "\075\035\070\064\074\001\002\000\024\006\063\027\073" +
    "\030\064\031\066\032\067\033\072\034\075\035\070\064" +
    "\074\001\002\000\004\037\204\001\002\000\024\006\063" +
    "\027\073\030\064\031\066\032\067\033\072\034\075\035" +
    "\070\064\074\001\002\000\004\037\202\001\002\000\004" +
    "\037\201\001\002\000\024\006\063\027\073\030\064\031" +
    "\066\032\067\033\072\034\075\035\070\064\074\001\002" +
    "\000\004\042\164\001\002\000\004\037\163\001\002\000" +
    "\006\004\161\035\135\001\002\000\024\006\063\027\073" +
    "\030\064\031\066\032\067\033\072\034\075\035\070\064" +
            "\074\001\002\000\004\037\157\001\002\000\030\022\051" +
            "\024\uffe1\025\043\042\uffe1\053\042\054\055\055\046\056" +
            "\044\057\062\063\061\064\054\001\002\000\004\037\155" +
            "\001\002\000\024\006\063\027\073\030\064\031\066\032" +
            "\067\033\072\034\075\035\070\064\074\001\002\000\024" +
            "\006\063\027\073\030\064\031\066\032\067\033\072\034" +
            "\075\035\070\064\074\001\002\000\024\006\063\027\073" +
            "\030\064\031\066\032\067\033\072\034\075\035\070\064" +
            "\074\001\002\000\052\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
            "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
            "\uffc4\020\uffc4\021\uffc4\023\uffc4\026\uffc4\036\uffc4\037\uffc4" +
            "\040\uffc4\061\uffc4\062\uffc4\001\002\000\042\005\103\006" +
            "\100\007\110\010\107\011\102\012\113\013\105\014\104" +
            "\015\111\016\101\017\112\020\077\021\114\037\uffcd\061" +
            "\106\062\115\001\002\000\052\005\uffc1\006\uffc1\007\uffc1" +
            "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
            "\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1\026\uffc1\036\uffc1" +
            "\037\uffc1\040\uffc1\061\uffc1\062\uffc1\001\002\000\052\005" +
            "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
            "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\023" +
            "\uffc3\026\uffc3\036\uffc3\037\uffc3\040\uffc3\061\uffc3\062\uffc3" +
            "\001\002\000\024\006\063\027\073\030\064\031\066\032" +
            "\067\033\072\034\075\035\070\064\074\001\002\000\052" +
            "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
            "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
            "\023\uffbf\026\uffbf\036\uffbf\037\uffbf\040\uffbf\061\uffbf\062" +
            "\uffbf\001\002\000\052\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
            "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
            "\uffc2\020\uffc2\021\uffc2\023\uffc2\026\uffc2\036\uffc2\037\uffc2" +
            "\040\uffc2\061\uffc2\062\uffc2\001\002\000\052\005\uffc5\006" +
            "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
            "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\026" +
            "\uffc5\036\uffc5\037\uffc5\040\uffc5\061\uffc5\062\uffc5\001\002" +
            "\000\054\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012" +
            "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0" +
            "\021\uffc0\023\uffc0\026\uffc0\035\135\036\uffc0\037\uffc0\040" +
            "\uffc0\061\uffc0\062\uffc0\001\002\000\024\006\063\027\073" +
            "\030\064\031\066\032\067\033\072\034\075\035\070\064" +
            "\074\001\002\000\052\005\uffae\006\uffae\007\uffae\010\uffae" +
            "\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
            "\uffae\020\uffae\021\uffae\023\uffae\026\uffae\036\uffae\037\uffae" +
            "\040\uffae\061\uffae\062\uffae\001\002\000\024\006\063\027" +
            "\073\030\064\031\066\032\067\033\072\034\075\035\070" +
            "\064\074\001\002\000\024\006\063\027\073\030\064\031" +
            "\066\032\067\033\072\034\075\035\070\064\074\001\002" +
            "\000\024\006\063\027\073\030\064\031\066\032\067\033" +
            "\072\034\075\035\070\064\074\001\002\000\024\006\063" +
            "\027\073\030\064\031\066\032\067\033\072\034\075\035" +
            "\070\064\074\001\002\000\024\006\063\027\073\030\064" +
            "\031\066\032\067\033\072\034\075\035\070\064\074\001" +
            "\002\000\024\006\063\027\073\030\064\031\066\032\067" +
            "\033\072\034\075\035\070\064\074\001\002\000\024\006" +
            "\063\027\073\030\064\031\066\032\067\033\072\034\075" +
            "\035\070\064\074\001\002\000\024\006\063\027\073\030" +
            "\064\031\066\032\067\033\072\034\075\035\070\064\074" +
            "\001\002\000\024\006\063\027\073\030\064\031\066\032" +
            "\067\033\072\034\075\035\070\064\074\001\002\000\024" +
            "\006\063\027\073\030\064\031\066\032\067\033\072\034" +
            "\075\035\070\064\074\001\002\000\024\006\063\027\073" +
            "\030\064\031\066\032\067\033\072\034\075\035\070\064" +
            "\074\001\002\000\024\006\063\027\073\030\064\031\066" +
            "\032\067\033\072\034\075\035\070\064\074\001\002\000" +
            "\024\006\063\027\073\030\064\031\066\032\067\033\072" +
            "\034\075\035\070\064\074\001\002\000\024\006\063\027" +
            "\073\030\064\031\066\032\067\033\072\034\075\035\070" +
            "\064\074\001\002\000\024\006\063\027\073\030\064\031" +
            "\066\032\067\033\072\034\075\035\070\064\074\001\002" +
            "\000\052\005\103\006\100\007\uffba\010\107\011\102\012" +
            "\113\013\105\014\104\015\111\016\uffba\017\112\020\077" +
            "\021\114\023\uffba\026\uffba\036\uffba\037\uffba\040\uffba\061" +
            "\uffba\062\uffba\001\002\000\052\005\uffb6\006\uffb6\007\uffb6" +
            "\010\107\011\102\012\113\013\105\014\104\015\111\016" +
            "\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\026\uffb6\036\uffb6" +
            "\037\uffb6\040\uffb6\061\uffb6\062\uffb6\001\002\000\052\005" +
            "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
            "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\023" +
            "\uffb3\026\uffb3\036\uffb3\037\uffb3\040\uffb3\061\uffb3\062\uffb3" +
            "\001\002\000\052\005\uffb7\006\uffb7\007\uffb7\010\107\011" +
            "\102\012\113\013\105\014\104\015\111\016\uffb7\017\uffb7" +
            "\020\077\021\114\023\uffb7\026\uffb7\036\uffb7\037\uffb7\040" +
            "\uffb7\061\uffb7\062\uffb7\001\002\000\052\005\uffb0\006\uffb0" +
            "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
            "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\023\uffb0\026\uffb0" +
            "\036\uffb0\037\uffb0\040\uffb0\061\uffb0\062\uffb0\001\002\000" +
            "\052\005\103\006\100\007\uffbc\010\107\011\102\012\113" +
            "\013\105\014\104\015\111\016\uffbc\017\112\020\077\021" +
            "\114\023\uffbc\026\uffbc\036\uffbc\037\uffbc\040\uffbc\061\uffbc" +
            "\062\uffbc\001\002\000\052\005\uffb5\006\uffb5\007\uffb5\010" +
            "\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5" +
            "\017\uffb5\020\uffb5\021\uffb5\023\uffb5\026\uffb5\036\uffb5\037" +
            "\uffb5\040\uffb5\061\uffb5\062\uffb5\001\002\000\052\005\103" +
            "\006\100\007\uffbb\010\107\011\102\012\113\013\105\014" +
            "\104\015\111\016\uffbb\017\112\020\077\021\114\023\uffbb" +
            "\026\uffbb\036\uffbb\037\uffbb\040\uffbb\061\uffbb\062\uffbb\001" +
            "\002\000\052\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
            "\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020" +
            "\uffb2\021\uffb2\023\uffb2\026\uffb2\036\uffb2\037\uffb2\040\uffb2" +
            "\061\uffb2\062\uffb2\001\002\000\052\005\uffb1\006\uffb1\007" +
            "\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1" +
            "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\026\uffb1\036" +
            "\uffb1\037\uffb1\040\uffb1\061\uffb1\062\uffb1\001\002\000\052" +
            "\005\uffbe\006\uffbe\007\uffbe\010\107\011\102\012\113\013" +
            "\105\014\104\015\111\016\uffbe\017\112\020\077\021\114" +
            "\023\uffbe\026\uffbe\036\uffbe\037\uffbe\040\uffbe\061\uffbe\062" +
            "\uffbe\001\002\000\052\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
            "\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
            "\uffb4\020\uffb4\021\uffb4\023\uffb4\026\uffb4\036\uffb4\037\uffb4" +
            "\040\uffb4\061\uffb4\062\uffb4\001\002\000\052\005\103\006" +
            "\100\007\110\010\107\011\102\012\113\013\105\014\104" +
            "\015\111\016\101\017\112\020\077\021\114\023\uffb8\026" +
            "\uffb8\036\uffb8\037\uffb8\040\uffb8\061\106\062\115\001\002" +
            "\000\052\005\uffbd\006\uffbd\007\uffbd\010\107\011\102\012" +
            "\113\013\105\014\104\015\111\016\uffbd\017\112\020\077" +
            "\021\114\023\uffbd\026\uffbd\036\uffbd\037\uffbd\040\uffbd\061" +
            "\uffbd\062\uffbd\001\002\000\052\005\uffb9\006\uffb9\007\uffb9" +
            "\010\107\011\102\012\113\013\105\014\104\015\111\016" +
            "\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9\026\uffb9\036\uffb9" +
            "\037\uffb9\040\uffb9\061\uffb9\062\uffb9\001\002\000\030\006" +
            "\063\027\073\030\064\031\066\032\067\033\072\034\075" +
            "\035\070\036\141\060\140\064\074\001\002\000\044\005" +
            "\103\006\100\007\110\010\107\011\102\012\113\013\105" +
            "\014\104\015\111\016\101\017\112\020\077\021\114\036" +
            "\uffc9\040\146\061\106\062\115\001\002\000\004\036\145" +
            "\001\002\000\004\064\142\001\002\000\052\005\uffca\006" +
            "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
            "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\023\uffca\026" +
            "\uffca\036\uffca\037\uffca\040\uffca\061\uffca\062\uffca\001\002" +
            "\000\006\036\uffc7\040\143\001\002\000\026\006\063\027" +
            "\073\030\064\031\066\032\067\033\072\034\075\035\070" +
            "\060\140\064\074\001\002\000\004\036\uffc6\001\002\000" +
            "\052\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
            "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
            "\uffcb\023\uffcb\026\uffcb\036\uffcb\037\uffcb\040\uffcb\061\uffcb" +
            "\062\uffcb\001\002\000\026\006\063\027\073\030\064\031" +
            "\066\032\067\033\072\034\075\035\070\060\140\064\074" +
            "\001\002\000\004\036\uffc8\001\002\000\042\005\103\006" +
            "\100\007\110\010\107\011\102\012\113\013\105\014\104" +
            "\015\111\016\101\017\112\020\077\021\114\036\151\061" +
            "\106\062\115\001\002\000\052\005\uffad\006\uffad\007\uffad" +
            "\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016" +
            "\uffad\017\uffad\020\uffad\021\uffad\023\uffad\026\uffad\036\uffad" +
            "\037\uffad\040\uffad\061\uffad\062\uffad\001\002\000\052\005" +
            "\uffaf\006\uffaf\007\uffaf\010\107\011\102\012\113\013\105" +
            "\014\104\015\111\016\uffaf\017\112\020\077\021\114\023" +
            "\uffaf\026\uffaf\036\uffaf\037\uffaf\040\uffaf\061\uffaf\062\uffaf" +
            "\001\002\000\042\005\103\006\100\007\110\010\107\011" +
            "\102\012\113\013\105\014\104\015\111\016\101\017\112" +
            "\020\077\021\114\037\154\061\106\062\115\001\002\000" +
            "\030\022\uffd9\024\uffd9\025\uffd9\042\uffd9\053\uffd9\054\uffd9" +
            "\055\uffd9\056\uffd9\057\uffd9\063\uffd9\064\uffd9\001\002\000" +
            "\030\022\uffdd\024\uffdd\025\uffdd\042\uffdd\053\uffdd\054\uffdd" +
            "\055\uffdd\056\uffdd\057\uffdd\063\uffdd\064\uffdd\001\002\000" +
            "\006\024\uffe0\042\uffe0\001\002\000\030\022\uffdc\024\uffdc" +
            "\025\uffdc\042\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
            "\uffdc\063\uffdc\064\uffdc\001\002\000\042\005\103\006\100" +
            "\007\110\010\107\011\102\012\113\013\105\014\104\015" +
    "\111\016\101\017\112\020\077\021\114\037\uffd0\061\106" +
    "\062\115\001\002\000\024\006\063\027\073\030\064\031" +
    "\066\032\067\033\072\034\075\035\070\064\074\001\002" +
    "\000\042\005\103\006\100\007\110\010\107\011\102\012" +
    "\113\013\105\014\104\015\111\016\101\017\112\020\077" +
    "\021\114\037\uffcc\061\106\062\115\001\002\000\030\022" +
    "\uffdb\024\uffdb\025\uffdb\042\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\063\uffdb\064\uffdb\001\002\000\004\052" +
    "\165\001\002\000\004\037\166\001\002\000\004\002\ufffd" +
    "\001\002\000\042\005\103\006\100\007\110\010\107\011" +
    "\102\012\113\013\105\014\104\015\111\016\101\017\112" +
    "\020\077\021\114\023\170\061\106\062\115\001\002\000" +
    "\042\022\uffff\024\uffff\025\uffff\042\uffff\043\006\044\014" +
    "\045\012\046\010\047\013\053\uffff\054\uffff\055\uffff\056" +
    "\uffff\057\uffff\063\uffff\064\uffff\001\002\000\030\022\051" +
    "\024\uffe1\025\043\042\uffe1\053\042\054\055\055\046\056" +
    "\044\057\062\063\061\064\054\001\002\000\006\024\173" +
    "\042\uffd7\001\002\000\040\022\uffff\025\uffff\042\uffff\043" +
    "\006\044\014\045\012\046\010\047\013\053\uffff\054\uffff" +
    "\055\uffff\056\uffff\057\uffff\063\uffff\064\uffff\001\002\000" +
    "\004\042\175\001\002\000\004\022\176\001\002\000\004" +
    "\037\uffd8\001\002\000\026\022\051\025\043\042\uffe1\053" +
    "\042\054\055\055\046\056\044\057\062\063\061\064\054" +
    "\001\002\000\004\042\uffd6\001\002\000\030\022\uffdf\024" +
    "\uffdf\025\uffdf\042\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\063\uffdf\064\uffdf\001\002\000\030\022\uffda\024" +
    "\uffda\025\uffda\042\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\063\uffda\064\uffda\001\002\000\042\005\103\006" +
    "\100\007\110\010\107\011\102\012\113\013\105\014\104" +
    "\015\111\016\101\017\112\020\077\021\114\037\uffcf\061" +
    "\106\062\115\001\002\000\030\022\uffde\024\uffde\025\uffde" +
    "\042\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057\uffde\063" +
    "\uffde\064\uffde\001\002\000\042\005\103\006\100\007\110" +
    "\010\107\011\102\012\113\013\105\014\104\015\111\016" +
    "\101\017\112\020\077\021\114\037\uffce\061\106\062\115" +
    "\001\002\000\042\005\103\006\100\007\110\010\107\011" +
    "\102\012\113\013\105\014\104\015\111\016\101\017\112" +
    "\020\077\021\114\026\207\061\106\062\115\001\002\000" +
    "\040\022\uffff\025\uffff\042\uffff\043\006\044\014\045\012" +
    "\046\010\047\013\053\uffff\054\uffff\055\uffff\056\uffff\057" +
    "\uffff\063\uffff\064\uffff\001\002\000\026\022\051\025\043" +
    "\042\uffe1\053\042\054\055\055\046\056\044\057\062\063" +
    "\061\064\054\001\002\000\004\042\212\001\002\000\004" +
    "\026\213\001\002\000\004\037\uffd5\001\002\000\030\006" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\037\uffd2\040\uffd2\064\uffd2\001\002\000\030\006" +
    "\063\027\073\030\064\031\066\032\067\033\072\034\075" +
    "\035\070\037\uffd3\040\217\064\074\001\002\000\042\005" +
    "\103\006\100\007\110\010\107\011\102\012\113\013\105" +
    "\014\104\015\111\016\101\017\112\020\077\021\114\037" +
    "\uffd4\061\106\062\115\001\002\000\004\064\220\001\002" +
    "\000\030\006\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1\064\uffd1\001\002" +
    "\000\004\035\222\001\002\000\016\036\uffe7\043\006\044" +
    "\014\045\012\046\010\051\227\001\002\000\004\036\235" +
    "\001\002\000\004\064\234\001\002\000\006\036\uffe5\040" +
    "\uffe5\001\002\000\006\036\uffe6\040\232\001\002\000\012" +
    "\043\006\044\014\045\012\046\010\001\002\000\004\064" +
    "\231\001\002\000\006\036\uffe2\040\uffe2\001\002\000\014" +
    "\043\006\044\014\045\012\046\010\051\227\001\002\000" +
    "\006\036\uffe4\040\uffe4\001\002\000\006\036\uffe3\040\uffe3" +
    "\001\002\000\042\022\uffff\025\uffff\041\237\042\uffff\043" +
    "\006\044\014\045\012\046\010\047\013\053\uffff\054\uffff" +
    "\055\uffff\056\uffff\057\uffff\063\uffff\064\uffff\001\002\000" +
    "\026\022\051\025\043\042\uffe1\053\042\054\055\055\046" +
    "\056\044\057\062\063\061\064\054\001\002\000\012\043" +
    "\006\044\014\045\012\046\010\001\002\000\040\022\uffff" +
    "\025\uffff\042\uffff\043\006\044\014\045\012\046\010\047" +
    "\013\053\uffff\054\uffff\055\uffff\056\uffff\057\uffff\063\uffff" +
    "\064\uffff\001\002\000\026\022\051\025\043\042\uffe1\053" +
    "\042\054\055\055\046\056\044\057\062\063\061\064\054" +
    "\001\002\000\004\042\243\001\002\000\004\050\244\001" +
    "\002\000\004\037\245\001\002\000\006\050\uffe9\052\uffe9" +
    "\001\002\000\004\042\247\001\002\000\004\050\250\001" +
    "\002\000\004\037\251\001\002\000\006\050\uffe8\052\uffe8" +
    "\001\002\000\004\052\ufffb\001\002\000\004\002\000\001" +
    "\002\000\010\004\263\037\ufff4\040\ufff4\001\002\000\006" +
    "\037\257\040\256\001\002\000\004\064\260\001\002\000" +
    "\046\022\ufffa\024\ufffa\025\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\045\ufffa\046\ufffa\047\ufffa\050\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\063\ufffa\064\ufffa\001\002" +
    "\000\010\004\261\037\ufff3\040\ufff3\001\002\000\024\006" +
    "\063\027\073\030\064\031\066\032\067\033\072\034\075" +
    "\035\070\064\074\001\002\000\044\005\103\006\100\007" +
    "\110\010\107\011\102\012\113\013\105\014\104\015\111" +
    "\016\101\017\112\020\077\021\114\037\ufff1\040\ufff1\061" +
    "\106\062\115\001\002\000\024\006\063\027\073\030\064" +
    "\031\066\032\067\033\072\034\075\035\070\064\074\001" +
    "\002\000\044\005\103\006\100\007\110\010\107\011\102" +
    "\012\113\013\105\014\104\015\111\016\101\017\112\020" +
    "\077\021\114\037\ufff2\040\ufff2\061\106\062\115\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\012\002\004\003\006\004\010\014\003\001" +
    "\001\000\004\012\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\035\006\033\001\001\000\002\001" +
    "\001\000\010\003\032\004\010\014\003\001\001\000\002" +
    "\001\001\000\004\013\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\251\006\033\001\001\000\002\001\001\000\004\007" +
    "\037\001\001\000\010\003\040\004\010\014\003\001\001" +
    "\000\002\001\001\000\022\010\056\011\051\021\047\022" +
    "\044\023\057\024\055\025\052\031\046\001\001\000\004" +
    "\032\214\001\001\000\006\026\205\031\070\001\001\000" +
    "\006\026\204\031\070\001\001\000\002\001\001\000\006" +
    "\026\202\031\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\166\031\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\157\031" +
    "\070\001\001\000\002\001\001\000\022\010\056\011\155" +
    "\021\047\022\044\023\057\024\055\025\052\031\046\001" +
    "\001\000\002\001\001\000\006\026\152\031\070\001\001" +
    "\000\006\026\064\031\070\001\001\000\006\026\151\031" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\147\031\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\075\031\070\001\001\000" +
    "\002\001\001\000\006\026\133\031\070\001\001\000\006" +
    "\026\132\031\070\001\001\000\006\026\131\031\070\001" +
    "\001\000\006\026\130\031\070\001\001\000\006\026\127" +
    "\031\070\001\001\000\006\026\126\031\070\001\001\000" +
    "\006\026\125\031\070\001\001\000\006\026\124\031\070" +
    "\001\001\000\006\026\123\031\070\001\001\000\006\026" +
    "\122\031\070\001\001\000\006\026\121\031\070\001\001" +
    "\000\006\026\120\031\070\001\001\000\006\026\117\031" +
    "\070\001\001\000\006\026\116\031\070\001\001\000\006" +
    "\026\115\031\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\135\027\136\031\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\026\135\027\143\031\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\026" +
    "\135\027\146\031\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\026\161\031" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\170\004\010\014\003\001\001\000\022" +
    "\010\056\011\171\021\047\022\044\023\057\024\055\025" +
    "\052\031\046\001\001\000\004\030\173\001\001\000\010" +
    "\003\176\004\010\014\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\010\056\011\177" +
    "\021\047\022\044\023\057\024\055\025\052\031\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\207\004\010\014\003\001\001" +
    "\000\022\010\056\011\210\021\047\022\044\023\057\024" +
    "\055\025\052\031\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\215\031\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\223\016" +
    "\222\017\225\020\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\223\020\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\235\004\010\014\003\001\001\000\022" +
    "\010\056\011\245\021\047\022\044\023\057\024\055\025" +
    "\052\031\046\001\001\000\004\014\237\001\001\000\010" +
    "\003\240\004\010\014\003\001\001\000\022\010\056\011" +
    "\241\021\047\022\044\023\057\024\055\025\052\031\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\261\031\070\001\001\000\002\001\001\000\006\026\263" +
    "\031\070\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              ProgramNode RESULT =null;
		int varDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDeclNode> varDeclListNode = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<FunNode> funListNode = (ArrayList<FunNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mainNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mainNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MainNode mainNode = (MainNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramNode(varDeclListNode,funListNode,mainNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              ArrayList<VarDeclNode> RESULT =null;
		RESULT = new ArrayList<VarDeclNode>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclNode> RESULT =null;
		int varDeclNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclNode varDeclNode = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclNode> varDeclListNode = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = varDeclListNode; varDeclListNode.add(varDeclNode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              MainNode RESULT =null;
		int varDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclNode> varDeclListNode = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<StatNode> statListNode = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = new MainNode(varDeclListNode, statListNode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Main",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              ArrayList<FunNode> RESULT =null;
		 RESULT = new ArrayList<FunNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= Fun FunList 
            {
              ArrayList<FunNode> RESULT =null;
		int funNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunNode funNode = (FunNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<FunNode> funListNode = (ArrayList<FunNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funListNode; funListNode.add(funNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclNode RESULT =null;
		int typeNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String typeNode = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idListInitNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<InitNode> idListInitNode = (ArrayList<InitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new  VarDeclNode("VARDECL", typeNode, idListInitNode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDeclNode RESULT =null;
		int idListInitObblNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListInitObblNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<InitNode> idListInitObblNode = (ArrayList<InitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new  VarDeclNode("VARDECL", null, idListInitObblNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= INTEGER 
            {
              String RESULT =null;
		 RESULT =  "INTEGER"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= BOOL 
            {
              String RESULT =null;
		 RESULT =  "BOOL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= REAL 
            {
              String RESULT =null;
		 RESULT =  "REAL"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= STRING 
            {
              String RESULT =null;
		 RESULT =  "STRING"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID 
            {
              ArrayList<InitNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<InitNode>() {{ add(new InitNode(new LeafNode("ID", id), null,null)); }}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID 
            {
              ArrayList<InitNode> RESULT =null;
		int idListInitNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListInitNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<InitNode> idListInitNode = (ArrayList<InitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = idListInitNode; idListInitNode.add(new InitNode(new LeafNode("ID", id), null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= ID ASSIGN Expr 
            {
              ArrayList<InitNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<InitNode>() {{add(new InitNode(new LeafNode("ID", id), exprNode,null));}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              ArrayList<InitNode> RESULT =null;
		int idListInitNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idListInitNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<InitNode> idListInitNode = (ArrayList<InitNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 idListInitNode.add(new InitNode(new LeafNode("ID", id),  exprNode,null)); RESULT = idListInitNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInitObbl ::= ID ASSIGN Const 
            {
              ArrayList<InitNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
              int constNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
              int constNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
              ConstNode constNode = (ConstNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
              RESULT = new ArrayList<InitNode>() {{
                add(new InitNode(new LeafNode("ID", id), null, constNode));
              }};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
          {
            ArrayList<InitNode> RESULT = null;
            int idListInitObblNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
            int idListInitObblNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
            ArrayList<InitNode> idListInitObblNode = (ArrayList<InitNode>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
            int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int constNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int constNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ConstNode constNode = (ConstNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            idListInitObblNode.add(new InitNode(new LeafNode("ID", id), null, constNode));
            RESULT = idListInitObblNode;
            CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl", 9, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
          {
            ConstNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("INTEGER_CONST", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Const", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
          {
            ConstNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("REAL_CONST", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Const", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
          {
            ConstNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("TRUE", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Const", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
          {
            ConstNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("FALSE", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Const", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
          {
            ConstNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("STRING_CONST", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Const", 11, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
          {
            FunNode RESULT = null;
            int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).left;
            int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).right;
            String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 10)).value;
            int paramDeclListNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).left;
            int paramDeclListNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).right;
            ArrayList<ParamDeclNode> paramDeclListNode = (ArrayList<ParamDeclNode>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 8)).value;
            int typeNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).left;
            int typeNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).right;
            String typeNode = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 5)).value;
            int varDeclListNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).left;
            int varDeclListNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).right;
            ArrayList<VarDeclNode> varDeclListNode = (ArrayList<VarDeclNode>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 4)).value;
            int statListNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
            int statListNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
            ArrayList<StatNode> statListNode = (ArrayList<StatNode>) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
            RESULT = new FunNode(new LeafNode("ID", id), paramDeclListNode, typeNode, varDeclListNode, statListNode);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun", 4, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 11)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              FunNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<ParamDeclNode> paramDeclListNode = (ArrayList<ParamDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclNode> varDeclListNode = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<StatNode> statListNode = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FunNode(new LeafNode("ID", id), paramDeclListNode, null, varDeclListNode, statListNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Fun",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= 
            {
              ArrayList<ParamDeclNode> RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParamDeclNode> RESULT =null;
		int nonEmptyParamDeclListNodleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nonEmptyParamDeclListNodright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParamDeclNode> nonEmptyParamDeclListNod = (ArrayList<ParamDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nonEmptyParamDeclListNod; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParamDeclNode> RESULT =null;
		int parDeclNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDeclNode parDeclNode = (ParamDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ParamDeclNode>() {{ add(parDeclNode);}};  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              ArrayList<ParamDeclNode> RESULT =null;
		int nonEmptyParamDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nonEmptyParamDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParamDeclNode> nonEmptyParamDeclListNode = (ArrayList<ParamDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParamDeclNode parDeclNode = (ParamDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 nonEmptyParamDeclListNode.add(parDeclNode); RESULT = nonEmptyParamDeclListNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParDecl ::= Type ID 
            {
              ParamDeclNode RESULT =null;
		int typeRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String typeRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDeclNode("IN",typeRef, new LeafNode("ID", id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= OUT Type ID 
            {
              ParamDeclNode RESULT =null;
		int typeRefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeRefright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String typeRef = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParamDeclNode("OUT", typeRef, new LeafNode("ID", id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= 
            {
              ArrayList<StatNode> RESULT =null;
		 RESULT = new ArrayList<StatNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= Stat StatList 
            {
              ArrayList<StatNode> RESULT =null;
		int statNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatNode statNode = (StatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatNode> statListNode = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=statListNode; statListNode.add(statNode);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IfStat SEMI 
            {
              StatNode RESULT =null;
		int ifStatNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ifStatNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatNode ifStatNode = (IfStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = ifStatNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WhileStat SEMI 
            {
              StatNode RESULT =null;
		int whileStatNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whileStatNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileStatNode whileStatNode = (WhileStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = whileStatNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadStat SEMI 
            {
              StatNode RESULT =null;
		int readStatNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readStatNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadStatNode readStatNode = (ReadStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = readStatNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat SEMI 
            {
              StatNode RESULT =null;
		int writeStatNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeStatNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteStatNode writeStatNode = (WriteStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = writeStatNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat SEMI 
            {
              StatNode RESULT =null;
		int assignStatNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignStatNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignStatNode assignStatNode = (AssignStatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = assignStatNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallFun SEMI 
            {
              StatNode RESULT =null;
		int callFunNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int callFunNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallFunNode callFunNode = (CallFunNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = callFunNode; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= RETURN Expr SEMI 
            {
              StatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnNode("RETURN", exprNode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclNode> varDeclListNode = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<StatNode> statListNode = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elseNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ElseNode elseNode = (ElseNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStatNode("IF", exprNode, varDeclListNode, statListNode,elseNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= 
            {
              ElseNode RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= ELSE VarDeclList StatList 
            {
              ElseNode RESULT =null;
		int varDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclNode> varDeclListNode = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatNode> statListNode = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseNode("ELSE", varDeclListNode, statListNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int varDeclListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varDeclListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<VarDeclNode> varDeclListNode = (ArrayList<VarDeclNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<StatNode> statListNode = (ArrayList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileStatNode("WHILE", exprNode, varDeclListNode, statListNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ReadStat ::= READ IdList Expr 
            {
              ReadStatNode RESULT =null;
		int idListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<LeafNode> idListNode = (ArrayList<LeafNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatNode("READ", idListNode, exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReadStat ::= READ IdList 
            {
              ReadStatNode RESULT =null;
		int idListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<LeafNode> idListNode = (ArrayList<LeafNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReadStatNode("READ", idListNode, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IdList ::= ID 
            {
              ArrayList<LeafNode> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<LeafNode>() {{ add(new LeafNode("ID", id));}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IdList ::= IdList COMMA ID 
            {
              ArrayList<LeafNode> RESULT =null;
		int idListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<LeafNode> idListNode = (ArrayList<LeafNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = idListNode; idListNode.add(new LeafNode("ID", id));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITE Expr 
            {
              WriteStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode("WRITE", exprNode);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WriteStat ::= WRITELN Expr 
            {
              WriteStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode("WRITELN", exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WriteStat ::= WRITET Expr 
            {
              WriteStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode("WRITET", exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WriteStat ::= WRITEB Expr 
            {
              WriteStatNode RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WriteStatNode("WRITEB", exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStatNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignStatNode("ASSIGN", new LeafNode("ID", id), exprNode);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallFunNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<ExprNode> exprListNode = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new CallFunNode("CALL FUN", new LeafNode("ID", id), exprListNode);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CallFun ::= ID LPAR RPAR 
            {
              CallFunNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallFunNode("CALL FUN", new LeafNode("ID", id), new ArrayList<ExprNode>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallFun",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprList ::= Expr 
            {
              ArrayList<ExprNode> RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayList<ExprNode>() {{ add(exprNode); }}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<ExprNode> RESULT =null;
		int exprNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListNodeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListNoderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprNode> exprListNode = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = exprListNode; exprListNode.add(exprNode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExprList ::= OUTPAR ID 
            {
              ArrayList<ExprNode> RESULT =null;
              int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
              int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
              String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
              RESULT = new ArrayList<ExprNode>() {{
                add(new OutParNode("OUTPAR", new LeafNode("ID", id)));
              }};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList", 21, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ExprList ::= OUTPAR ID COMMA ExprList 
          {
            ArrayList<ExprNode> RESULT = null;
            int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprListNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprListNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ArrayList<ExprNode> exprListNode = (ArrayList<ExprNode>) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = exprListNode;
            exprListNode.add(new OutParNode("OUTPAR", new LeafNode("ID", id)));
            CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList", 21, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= INTEGER_CONST 
          {
            ExprNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("INTEGER", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= REAL_CONST 
          {
            ExprNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("REAL", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= TRUE 
          {
            ExprNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("TRUE", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= FALSE 
          {
            ExprNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("FALSE", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= STRING_CONST 
          {
            ExprNode RESULT = null;
            int iconstleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int iconstright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            Object iconst = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConstNode("STRING_CONST", iconst);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= ID 
          {
            ExprNode RESULT = null;
            int idleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int idright = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            String id = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new LeafNode("ID", id);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= CallFun 
          {
            ExprNode RESULT = null;
            int callFunNodeleft = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int callFunNoderight = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            CallFunNode callFunNode = (CallFunNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = callFunNode;
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr PLUS Expr 
          {
            ExprNode RESULT = null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpNode("PLUS", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr MINUS Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpNode("MINUS", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr TIMES Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpNode("TIMES", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr DIV Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprNode2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprNode2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode exprNode2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOpNode("DIV", exprNode1, exprNode2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr DIVINT Expr 
            {
              ExprNode RESULT =null;
		int exprNode1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprNode1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode exprNode1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
              int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
              int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
              ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
              RESULT = new BinOpNode("DIVINT", exprNode1, exprNode2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr AND Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new OrAndOpNode("AND", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr POW Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new BinOpNode("POW", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr STR_CONCAT Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new ConcatNode("STR_CONCAT", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr OR Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new OrAndOpNode("OR", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr GT Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new RelOpNode("GT", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr GE Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new RelOpNode("GE", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr LT Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new RelOpNode("LT", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr LE Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new RelOpNode("LE", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr EQ Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new RelOpNode("EQ", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr NE Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
            int exprNode2left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode2right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode2 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new RelOpNode("NE", exprNode1, exprNode2);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= MINUS Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new UnOpNode("MINUS", exprNode1);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= NOT Expr 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
            RESULT = new NotOpNode("NOT", exprNode1);
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= LPAR Expr RPAR 
          {
            ExprNode RESULT = null;
            int exprNode1left = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
            int exprNode1right = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
            ExprNode exprNode1 = (ExprNode) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
            RESULT = exprNode1;
            CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr", 20, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)), ((java_cup.runtime.Symbol) CUP$parser$stack.peek()), RESULT);
          }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
